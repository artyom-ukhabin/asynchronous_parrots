  2. Авторизация в таск-трекере должна выполняться через общий сервис авторизации UberPopug Inc

    Actor: Account
    Command: Log in
    Data: AccountAuthInfo (+ Token?)
    Event: Account.Logined

  4. Новые таски может создавать кто угодно (администратор, начальник, разработчик, менеджер и любая другая роль). У задачи должны быть описание, статус (выполнена или нет) и попуг, на которого заассайнена задача.

    Actor: Account
    Command: Create Task
    Data: Task (desc, status, account_id)
    Event: Tasks.Created

  5. Менеджеры или администраторы должны иметь кнопку «заассайнить задачи», которая возьмёт все открытые задачи и рандомно заассайнит каждую на любого из сотрудников (**Update:** кроме менеджера и администратора) . Не успел закрыть задачу до реассайна — сорян, делай следующую.
    1. Ассайнить задачу можно на кого угодно (**Update:** кроме менеджера и администратора), это может быть любой существующий аккаунт из системы.
    2. Ассайнить задачу можно только кнопкой «заассайнить задачи»
    3. При нажатии кнопки «заассайнить задачи» все текущие не закрытые задачи должны быть случайным образом перетасованы между каждым аккаунтом в системе
    4. Мы не заморачиваемся на ограничение по нажатию на кнопку «заассайнить задачи». Её можно нажимать хоть каждую секунду.
    5. На одного сотрудника может выпасть любое количество новых задач, может выпасть ноль, а может и 10.
    Actor: Manager/Admin
    Command: Reassign Task(s)
    Data: [Task id + account_id]
    Event: [Task.Reassigned] (&&/|| Tasks.Reassigned)

  6. Каждый сотрудник должен иметь возможность отметить задачу выполненной.

    Actor: Account
    Command: Resolve Task
    Data: Task id
    Event: Tasks.Resolved

  3. У каждого из сотрудников должен быть свой счёт, который показывает, сколько за сегодня он получил денег. У счёта должен быть аудитлог того, за что были списаны или начислены деньги, с подробным описанием каждой из задач.

    Actor: Purse.debited || Purse.credited
    Command: Log Purse change
    Data: Task description, Price, Purse id, Account Audit log
    Event: AccountAuditlog.added

  4. Расценки
    - цены на задачу определяется единоразово, в момент появления в системе (можно с минимальной задержкой)
      Actor: Tasks.Created
      Command: Set Price
      Data: Task id, AssignedPrice, ResolvedPrice
      Event: Price.Set

    - деньги списываются сразу после ассайна на сотрудника, а начисляются после выполнения задачи.

      Actor: Tasks.Reasssigned
      Command: Debit
      Data: AssignedPrice, Account Purse id
      Event: Purse.debited

      Actor: Tasks.Resolved
      Command: Credit
      Data: ResolvedPrice, Account Purse id
      Event: Purse.credited
    
  6. В конце дня необходимо
    a. считать сколько денег сотрудник получил за рабочий день
      (Здесь может быть реальное событие, если считать отрицательные балансы, иначе считать ничего не
надо - результат на счету)

    b. отправлять на почту сумму выплаты.    
      
      Actor: Purse.cleared
      Command: Send email
      Data: Purse id, Account email
      Event: IncomeEmail.sent

  7. После выплаты баланса (в конце дня) он должен обнуляться, и в аудитлоге всех операций аккаунтинга должно быть отображено, что была выплачена сумма. (Не работает на отрицательный баланс)

    Actor: Cron
    Command: Clear Purse
    Data: [Purse ids, Sum]
    Event: [Purse.cleared]

    Actor: Purse.cleared
    Command: Log account credit
    Data: Sum, Account id
    Event: GlobalAuditlog.added

  1. У админов и бухгалтеров должен быть доступ к общей статистике по деньгами заработанным (количество заработанных топ-менеджментом за сегодня денег + статистика по дням).

    Actor: AccountAuditlog.added
    Command: Update Managers Income
    Data: Price, DayIncome
    Event: ManagersIncome.Counted

  2. Нужно указывать, сколько заработал топ-менеджмент за сегодня и сколько попугов ушло в минус.

    Actor: Admin
    Command: Count Debited Accounts
    Data: [Account Log]
    Event: Accounts.DebitedFound

  3. Нужно показывать самую дорогую задачу за день, неделю или месяц.
    a. самой дорогой задачей является задача с наивысшей ценой из списка всех закрытых задач за определенный период времени

      Actor: Admin
      Command: Count the most Expensive Task
      Data: [ResolvedPrice], Period, Task
      Event: Tasks.ExpensiveFound

Цепочки:

Log in
Create Task -> Set Price
Reassign Task -> Debit -> Log Purse change -> Update Managers Income
Resolve Task -> Credit -> Log Purse change -> Update Managers Income
Clear Purse -> Send email
            -> Log account credit
Count Debited Accounts
Count the most Expensive Task