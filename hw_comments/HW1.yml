Исправления с прошлого реквеста:
  - Спроектировал систему еще один раз, сравнил и исправил исходную.
  ES:
    - Извлечены новые ES-события из бизнес-требований, что обогатило модель данных.
  Схема доменов: 
    - удален домен Notifier - в данном случае это не домен, а чисто технический сервис из урока.
  Схема сервисов: 
    - Проставлены синхронные коммуникации извне и сервиса авторизации с остальными сервисами.
    - Убран синхронный запрос из аккаунтинга в таск-трекер - это premature решение проблемы целостности. Проблемы еще нет и решение может быть другим.

Полученные знания:
  ES:
    - В первом варианте дизайна ES-команды сразу были побиты по доменам - на самом деле это нужно делать только после формирования цепочек - лишний прайминг.
  Модель данных:
    - Не все данные из ES формируют Entity на модели. Пример - сумма в команде Log account credit, которая является VO (аргументам) и не существует в модели.
  Выделение доменов:
    - Домены бьются по цепочкам ES, но не обязательно как одна цепочка - один домен. Границы доменов рисуются по цепочкам - основная идея в том, что набор связанных команд находится по одну сторону от разделения и попадает в один контекст/домен. Находящиеся по одну сторону границ части разных цепочек и формируют контекст/домен.
    - Вероятно, на этом шаге так же используется видение независимого использования сервиса с доменом при падении другого.
    - Предположительно, контекст - выделяемая область логически связанных терминов.
    - События извлекаются также из кажущихся требований о чтении - так получились команды домена аналитики.
  Домены -> сервисы:
    - Notifier в моих схемах - пример того самого чисто технического сервиса из урока. Его не существует на уровне доменов.
  Коммуникации:
    - В уроке показано, что бизнес-команды = синхронные коммуникации извне для каждого сервиса.
    - Также в уроке показано что сервис авторизации синхронно коммуницирует с остальными сервисами.
    - Бизнесовые коммуникации полностью или почти полностью получаются из ES, CUD - из модели данных.  

Комментарии:
  - Физическая выплата денег может происходить в команде Clear Purse. Если имеется задумка сделать отдельный технический сервер по выпотам - нужно будет разбить команду на две, забиндить физическую выплату на событие из первой подкоманды и соблюсти распределенную транзакцию. 

Вопросы:
  - Разобраться с выделением доменов из ES и модели данных.
  - Появление абстракция авторизации - уровень доменов или сервисов? Выделяется просто из-за DRY или подходит под контекст и без него?
  - Хватает ли одной информации из ES чтоб спроектировать модель данных или нужно повторно смотреть на требования - упускаются требования на чтение?
  - ES-сущности в поле данных должны содержать как входные, так и выходные данные, чтоб лучше формировать модель данных.
  - Предположительно роли = условия на более низком уровне, которые не стоит учитывать сейчас, как и было на уроке. По факту, это ограничения, которые делают из длинной ES-цепочки более короткую. То же самое относится и к условиям типа "делать только для положительного баланса". 
    Плюс роли можно заменить.
  - Не понятно, по каким условиям выделяются составные части основных сущностей (типа статус задачи) на модели данных и в чем смысл их выделения.
  - Можно ли в качестве триггера для запуска логики использовать CUD-событие вместо бизнесового?
