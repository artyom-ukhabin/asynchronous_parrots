События:

2. Авторизация в таск-трекере должна выполняться через общий сервис авторизации UberPopug Inc
  - Actor — Account
  - Command — Log in
  - Data — Token?
  - Event — Account.Logined

4. Новые таски может создавать кто угодно (администратор, начальник, разработчик, менеджер и любая другая роль). У задачи должны быть описание, статус (выполнена или нет) и попуг, на которого заассайнена задача.
  - Actor — Account
  - Command — Create Task
  - Data — Task (desc, status, account_id)
  - Event — Task.Created

5. Менеджеры или администраторы должны иметь кнопку «заассайнить задачи», которая возьмёт все открытые задачи и рандомно заассайнит каждую на любого из сотрудников (**Update:** кроме менеджера и администратора) . Не успел закрыть задачу до реассайна — сорян, делай следующую.
    1. Ассайнить задачу можно на кого угодно (**Update:** кроме менеджера и администратора), это может быть любой существующий аккаунт из системы.
    2. Ассайнить задачу можно только кнопкой «заассайнить задачи»
    3. При нажатии кнопки «заассайнить задачи» все текущие не закрытые задачи должны быть случайным образом перетасованы между каждым аккаунтом в системе
    4. Мы не заморачиваемся на ограничение по нажатию на кнопку «заассайнить задачи». Её можно нажимать хоть каждую секунду.
    5. На одного сотрудника может выпасть любое количество новых задач, может выпасть ноль, а может и 10.
  - Actor — Manager or Admin (Account with role)
  - Command — Reassign Task(s)
  - Data — [Task id + account_id]
  - Event — [Task.Reassigned] (&&/|| Tasks.Reassigned)

6. Каждый сотрудник должен иметь возможность видеть в отдельном месте список заассайненных на него задач + отметить задачу выполненной.
  - Actor — Account
  - Command — Resolve task
  - Data — Task id
  - Event — Task.Resolved

### Аккаунтинг: кто сколько денег заработал

2. *Авторизация*

3. У каждого из сотрудников должен быть свой счёт, который показывает, сколько за сегодня он получил денег. У счёта должен быть аудитлог того, за что были списаны или начислены деньги, с подробным описанием каждой из задач.
  - Actor — Purse.debited || Purse.credited
  - Command — Log Purse change
  - Data — Task description, Price, Purse id
  - Event — AccountAuditlog.added

4. Расценки:
    - цены на задачу определяется единоразово, в момент появления в системе (можно с минимальной задержкой)
      - Actor — Task.created
      - Command — Set Price
      - Data — Task id, AssignedPrice, ResolvedPrice
      - Event — Prices.created

    - деньги списываются сразу после ассайна на сотрудника, а начисляются после выполнения задачи.
      - Actor — Task.Reassigned
      - Command — Debit
      - Data — AssignedPrice, Account Purse id
      - Event — Purse.debited

      - Actor — Task.Resolved
      - Command — Credit
      - Data — ResolvedPrice, Account Purse id
      - Event — Purse.credited

6. В конце дня необходимо:
    a. считать сколько денег сотрудник получил за рабочий день
      (Здесь может быть реальное событие, если считать отрицательные балансы, иначе считать ничего не
надо - результат на счету)
    
    b. отправлять на почту сумму выплаты.
      - Actor — Purse.cleared
      - Command — Send email
      - Data — Purse id, Account email
      - Event — IncomeEmail.sent

(Сумма в такой ситуации виснет в воздухе и нигде не сохраняется? Думать об этом не ответственность ES?)

7. После выплаты баланса (в конце дня) он должен обнуляться, и в аудитлоге всех операций аккаунтинга должно быть отображено, что была выплачена сумма. (Не работает на отрицательный баланс)
  - Actor — Cron
  - Command — Clear Purse
  - Data — [Purse ids, Sum]
  - Event — [Purse.cleared]

  - Actor — Purse.cleared
  - Command — Log account credit
  - Data — Sum, Account id
  - Event — GlobalAuditlog.added

Цепочки:

Log in
Create Task -> Set Price
Reassign Task -> Debit -> Log Purse change
Resolve Task -> Credit -> Log Purse change
Clear Purse -> Send email
            -> Log account credit     